#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__) + "/../lib" if $0 == __FILE__
require 'optparse'
require 'lunchy'

CONFIG = { :verbose => false, :write => false }
OPERATIONS = %w(start stop restart ls list status install edit)

option_parser = OptionParser.new do |opts|
  opts.banner = "Lunchy #{Lunchy::VERSION}, the friendly launchctl wrapper\nUsage: #{__FILE__} [#{OPERATIONS.join('|')}] [options]"

  opts.on("-F", "--force", "Force start (disabled) agents") do |verbose|
    CONFIG[:force] = true
  end

  opts.on("-v", "--verbose", "Show command executions") do |verbose|
    CONFIG[:verbose] = true
  end

  opts.on("-w", "--write", "Persist command") do |verbose|
    CONFIG[:write] = true
  end

  opts.separator <<-EOS

Supported commands:

 ls [pattern]            Show the list of installed agents, with optional [pattern] filter
 list [pattern]          Alias for 'ls'
 start [-wF] [pattern]   Start the first agent matching [pattern]
 stop [-w] [pattern]     Stop the first agent matching [pattern]
 restart [pattern]       Stop and start the first agent matching [pattern]
 status [pattern]        Show the PID and label for all agents, with optional [pattern] filter
 install [file]          Installs [file] to ~/Library/LaunchAgents or /Library/LaunchAgents (whichever it finds first)
 edit [pattern]          Opens the launchctl daemon file in the default editor (EDITOR environment variable)

-w will persist the start/stop command so the agent will load on startup or never load, respectively.

Example:
 lunchy ls
 lunchy start -w redis
 lunchy stop mongo
 lunchy status mysql
 lunchy install /usr/local/Cellar/redis/2.2.2/io.redis.redis-server.plist
 lunchy edit mongo

Note: if you run lunchy as root, you can manage daemons in /Library/LaunchDaemons also.
EOS
end
option_parser.parse!


op = ARGV.shift
if OPERATIONS.include?(op)
  begin
    Lunchy.new.send(op.to_sym, ARGV)
  rescue ArgumentError => ex
    puts ex.message
  rescue Exception => e
    puts "Uh oh, I didn't expect this:"
    puts e.message
    puts e.backtrace.join("\n")
  end
else
  puts option_parser.help
end